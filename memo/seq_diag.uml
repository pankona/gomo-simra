
@startuml
hide footbox

participant main
participant Scenes as scene
participant Engine as engine
participant GomobileApp as gomo
participant Peer as peer

main -> engine : Initialize(Scene)
activate engine

engine -> gomo : Initialize()
activate gomo
engine <-- gomo
deactivate gomo

engine -> peer : Initialize()
activate peer
engine <-- peer
deactivate peer

main <-- engine
deactivate engine

main -> engine : Start()
activate engine
engine -> engine      : changescene
note over engine      : currentscene = scene1
engine -> scene       : Initialize()
activate scene
loop as much as needed
note over scene       : Define Sprite as variables
scene -> peer         : AddSprite(Sprite)
activate peer
note over peer        : Hold sprites\nas node
scene <-- peer
deactivate peer
end
engine <-- scene
deactivate scene
engine -> gomo        : Start()
activate gomo
engine <-- gomo
deactivate gomo
main <-- engine
deactivate engine

loop
gomo -> engine : Update()
activate engine
engine -> scene       : Update() 
activate scene
note over scene       : Calculate position\nfor every sprite
engine <-- scene
deactivate scene
engine -> peer        : Update()
note over peer        : Draw for every\nadded sprite
activate peer
engine <-- peer
deactivate peer
gomo <-- engine
deactivate engine
end

engine <-- scene      : sceneEnd(NextScene)
activate engine
engine -> engine      : changescene
note over engine      : currentscene = scene2
engine -> peer        : RemoveAllSprites()
activate peer
note over peer        : remove all nodes
engine <-- peer
deactivate peer
engine -> scene       : Initialize()
deactivate engine

scene -> engine : Stop()
activate engine
note over engine      : currentscene = nil
engine -> peer        : Finalize()
activate peer
note over peer        : Cleanup if necessary
engine <-- peer
deactivate peer
scene <-- engine
deactivate engine

@enduml
